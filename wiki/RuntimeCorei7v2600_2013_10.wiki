#summary Benchmark results for an Intel Core i7-2600 Processor on 64bit Linux

Comments:

  * Updated: MTJ, la4j, JBlas, CommonsMath, ojAlgo, EJML, UJMP, Jama
  * MTJ now includes a native version (MTJ-N) and has many internal changes
  * Removed UJMP-Native since the version on the website doesn't contain native code apparently
  * Summary results now define a small matrix as having a width/height of 10 instead of 4
  * For MTJ-N to have the performance shown here, be sure to use optimized native libraries.
    * https://github.com/fommil/netlib-java/

Links to the results:
  * [#Summary_Results Summary Results]
  * [#Pure_Java_Libraries Pure Java Results]
    * [#Java:_Basic_Operation_Results Basic Operations]
    * [#Java:_Solving_Linear_Systems Solving Linear Systems]
    * [#Java:_Matrix_Decompositions Matrix Decompositions]
  * [#Mixed_Java_and_Native_Libraries Java and Native Results]
    * [#Mixed:_Basic_Operation_Results Basic Operations]
    * [#Mixed:_Solving_Linear_Systems Solving Linear Systems]
    * [#Mixed:_Matrix_Decompositions Matrix Decompositions]

<g:plusone size="medium"></g:plusone>

=Test Environment =

Test Environment:
|| Date || 2013 / 10 ||
|| OS   || Mint 14 64bit ||
|| Kernel || 3.5.0-17-Generic ||
|| CPU  || Core i7-2600 3.4 GHz - 4 cores - 8 threads ||
|| RAM || 11 G ||
|| CPU Cache || 8194 KB ||
|| JVM  || Java HotSpot(TM) 64-Bit Server 1.7.0_17 ||
|| Benchmark || 0.10 ||

Tested Libraries:
|| Name || Version         ||
|| Colt ||  1.2            ||
|| Commons Math || 3.2     ||
|| EJML ||  0.23           ||
|| Jama || 1.0.3           ||
|| JBlas || 1.2.3          ||
|| la4j || 0.4.5           ||
|| MTJ || 0.9.13           ||
|| OjAlgo || 34.8          || 
|| Parallel Colt || 0.9.4  ||
|| UJMP || 0.2.5           ||


= Summary Results =

The following results are a weighted sum across all operations within each matrix size.  Operations which take longer will have more weight.  If a library could not finish an operation then it's score is set to zero.  An artifact of this approach is that libraries which ran out of memory during an expensive operation are significantly penalized.

==Pure Java Summary Results==

http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/summary.png

== Mixed Java and Native Summary Results ==

http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/summary.png

= Pure Java Libraries =

These results show the performance of libraries that have code written entirely in Java.

==Java: Basic Operation Results==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/add.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/scale.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/mult.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/multTransB.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/det.png|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/transpose.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/invert.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/invertSymmPosDef.png ||

==Java: Solving Linear Systems==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/solveExact.png ||http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/solveOver.png||

==Java: Matrix Decompositions==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/svd.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/eigSymm.png ||


----
= Mixed Java and Native Libraries =

These results show the performance of libraries that either use pure Java or calls to native libraries.

==Java: Basic Operation Results==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/add.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/scale.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/mult.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/multTransB.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/det.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/transpose.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/invert.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/invertSymmPosDef.png ||


==Java: Solving Linear Systems==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/solveExact.png ||http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/solveOver.png||

==Java: Matrix Decompositions==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/svd.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeCorei7v2600_2013_10.attach/native/eigSymm.png ||