#summary Benchmark results for Q9400 Vista 64

Comments:

  * Fixed a bug where overhead was being measured.
    * Did not change results significantly since last benchmark because an earlier change reduced overhead so much. 
    * Explains some strange results seen a while ago.
  * To see how different libraries handle memory caches differently three different matrix shapes are transposed.
    * Tall, Wide, Square.
    * In the future all but square will be turned off by default.
  * Changed mult a^T^b to  ab^T^
    * This was done to favor libraries with row-major matrices and specially built operator.
    * mult ab favors column-major libraries.
    * Was a test to see if some mult performance difference was because of row-major/column-major design decision.
  * EJML, ojAlgo, UJMP updated.
  * Both UJMP and JBlas are run on a 32 JVM since there is an issue with running them in 64bit JVM
    * There are no results for matrices of size 2000 or greater for UJMP and JBlas because the 32bit VM can't allocate enough memory.

Links to the results:
  * [#Pure_Java_Libraries Pure Java Results]
    * [#Java:_Basic_Operation_Results Basic Operations]
    * [#Java:_Solving_Linear_Systems Solving Linear Systems]
    * [#Java:_Matrix_Decompositions Matrix Decompositions]
  * [#Mixed_Java_and_Native_Libraries Java and Native Results]
    * [#Mixed:_Basic_Operation_Results Basic Operations]
    * [#Mixed:_Solving_Linear_Systems Solving Linear Systems]
    * [#Mixed:_Matrix_Decompositions Matrix Decompositions]

=Test Environment =

Test Environment:
|| Date || 2010.08.02 ||
|| OS   || Vista 64bit ||
|| CPU  || Q9400 - 2.66 Ghz - 4 cores ||
|| JVM  || Java HotSpot(TM) 64-Bit Server VM 1.6.0_18 ||
|| Benchmark || 0.7 ||

Tested Libraries:
|| Name || Version         ||
|| Colt ||  1.2            ||
|| Commons Math || 2.1     ||
|| EJML ||  0.14           ||
|| Jama || 1.0.2           ||
|| JBlas || 1.0.2          ||
|| MTJ || 0.9.12           || 
|| OjAlgo || 29.24          || 
|| Parallel Colt || 0.9.4  ||
|| UJMP || 0.2.5 with 3rd party ||

= Pure Java Libraries =

These results show the performance of libraries that have code written entirely in Java.

==Java: Basic Operation Results==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/add.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/scale.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/mult.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/multTranB.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/det.png|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/tranSq.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/tranWide.png|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/tranTall.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/inv.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/invSymmPosDef.png ||

==Java: Solving Linear Systems==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/solveEq.png ||http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/solveOver.png||

==Java: Matrix Decompositions==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/svd.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/EigSymm.png ||


----
= Mixed Java and Native Libraries =

These results show the performance of libraries that either use pure Java or calls to native libraries.

==Java: Basic Operation Results==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/add.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/scale.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/mult.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/multTranB.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/det.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/tranSq.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/tranTall.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/tranWide.png ||
|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/inv.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/invSymmPosDef.png ||


==Java: Solving Linear Systems==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/solveEq.png ||http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/solveOver.png||

==Java: Matrix Decompositions==

|| http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/svd.png || http://java-matrix-benchmark.googlecode.com/svn/wiki/RuntimeQ9400_2010_08.attach/native/EigSymm.png ||