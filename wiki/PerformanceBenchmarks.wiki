#summary One-sentence summary of this page.

= Introduction =

The following is a summary what was evaluated and why.  To skip all of this and see the plots click on the links below:

|| Processor || Num CPUs || Year Made || Link ||
|| Intel Q9400  || 4 || 2008 || BenchmarkQ9400  ||
|| Pentium M || 1 || 2005? || BenchmarkPentiumM ||

= Java Matrix Benchmark Settings =

This is how the benchmark was configured.  See the code for an explanation of these settings.

|| Setting || Value ||
|| numBlockTrials || 5 ||
|| numBlocks || 5 ||
|| TRIAL_TIME || 3000 ||
|| memorySlaveBase || 10 ||
|| memorySlaveScale || 8 ||
|| randizeOrder || true ||

== Libraries Summary ==

Here are the libraries that were tested.

|| Name || Version         || Multi-Threaded || Physical Transpose ||
|| EJML ||  0.7            ||       || true  ||
|| Colt ||  1.2            || true  ||       ||
|| Commons Math || 2.0     ||       || true  ||
|| Jama || 1.0.2           ||       || true  ||
|| JScience || 4.3         || true  || true  ||
|| MTJ || 0.9.12           ||       || true  ||
|| OjAlgo || 28.26         || true  ||       ||
|| Parallel Colt || 0.9.1  || true  ||       ||
|| UJMP || 0.2.3           ||       || true  ||

= Operations Tested =

Three primary types of operations are tested; basic, solving, and decompositions.  If a library did not support one of the operations it was simply omitted from that test.

== Basic Operations ==

The following are several common operations used in linear algebra.  There are many different permutations on these that some libraries support.  Testing them all is not of practical value.

Matrix transpose is primarily handled in two ways by the libraries.  In some it is a physical transpose where a new matrix is created and the transpose written to it.  In others a matrix is just flagged as being transposed.  The transpose benchmark only tested a physical transpose.  However, to test the merits of flagging a library as being transposed, a transpose then multiplication operation was also tested.

|| Operation || Description ||
|| {{{C = Î± * B}}} || Scaling ||
|| {{{C = A + B}}} || Addition ||
|| {{{C = A * B}}} || Matrix multiplication ||
|| C = A<sup>T</sup> {{{*}}} B || Transpose then multiplication. ||
|| det(A) || Determinant ||
|| C = A<sup>T</sup> || Physical transpose ||
|| C = inv(A) || Invert ||

== Linear Solving ==

Most libraries provided ways to solve for linear systems.  Typically there are different algorithms used when a square system is being solved for versus an overdetermined system.  Thus there are two benchmarks.

|| Operation || Description ||
|| {{{A*x = b}}} where m=n|| Solving for x when A is a square non-singular matrix.||
|| {{{A*x = b}}} where m>n|| Solving for x when it is an overdetermined system.||

== Decompositions ==

Internally how each library performed decompositions varied significantly.  For example,
some out extract all the decomposed matrices at once, while others would only extract
them upon request.  To overcome this problem all of the decompositions tests would first
request that they decompose the matrix, then extract each of the decomposed matrices.

One could argue that extracting the decomposed matrices is often an unnecessary.  While
true, one would also need to understand the internals of how the algorithm worked to avoid doing so.  

|| Operation || Description ||
|| LU || Square non-singular matrices. ||
|| Cholesky || Square positive definite matrices. ||
|| QR || Rectangular matrices where m > n ||
|| SVD || Square matrix. ||
|| Eigen || Symmetric square matrix. ||